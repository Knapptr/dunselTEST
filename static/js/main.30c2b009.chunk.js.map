{"version":3,"sources":["imgs/DUNSEL1/1-0.png","logo.svg","imgs sync /.(png|jpe?g|svg)$","imgs/DUNSEL1/1-1.png","imgs/DUNSEL1/1-2.png","imgs/DUNSEL1/1-3.png","imgs/DUNSEL1/1-4.png","imgs/DUNSEL1/1-5.png","imgs/DUNSEL1/1-6.png","imgs/DUNSEL1/1-7.png","serviceWorker.js","pageDisplay.js","issueCreator.js","Slider.jsx","imageimport.js","index.js","ImageDisplay.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Boolean","window","location","hostname","match","PageDisplay","state","orient","page","landscape","panels","currentPage","props","currentPages","displayAmount","issue","loaded","pages","length","className","onClick","handleClick","src","images","alt","leftPage","rightPage","Component","createIssue","issueNumber","landscapeArray","r","item","index","replace","importAll","require","console","log","pagesArray","p","image","includes","newPage","number","push","pagesAssigner","Slider","screenWidth","innerWidth","issueLength","focus","imagesLoaded","loadImages","imagesArray","i","Image","onload","setState","displayLogic","amount","updateDisplayAmount","width","updateWidth","setFocus","setPage","nextPage","prevPage","toCover","toBack","onCover","issueLenth","widthCheck","currentlyDisplayed","isViewed","some","el","setImagesLoaded","this","addEventListener","keyCode","removeEventListener","array","btns","key","createNavBtns","testIssue","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,iC,kBCA3CD,EAAOC,QAAU,IAA0B,kC,2GCA3C,IAAIC,EAAM,CACT,oBAAqB,EACrB,oBAAqB,GACrB,oBAAqB,GACrB,oBAAqB,GACrB,oBAAqB,GACrB,oBAAqB,GACrB,oBAAqB,GACrB,oBAAqB,IAItB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBN,EAAOC,QAAUE,EACjBA,EAAeE,GAAK,I,gBC7BpBL,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,2GCYvBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCChBOC,EAAb,2MAEIC,MAAQ,GAFZ,EAMIC,OAAS,SAACC,GACN,OAAIA,EAAKC,UACE,YACK,YATxB,wEAYc,IAAD,OA8CL,OA5Cc,WACV,IAAIC,EACEC,EAAc,EAAKC,MAAMC,aAEzBC,GADQ,EAAKF,MAAMG,MACH,EAAKH,MAAME,eACjC,GAAK,EAAKF,MAAMI,OAMZ,GAAsB,IAAlBF,GAAuC,IAAhBH,GAAqBA,IAAgB,EAAKC,MAAMG,MAAME,MAAMC,OAAS,EAC5FR,EACI,yBAAKS,UAAU,SAEX,yBAAKA,UAAW,gBAAkB,EAAKZ,OAAO,EAAKK,MAAMG,MAAME,MAAMN,KAEjE,yBAAKS,QAAS,WAAQ,EAAKR,MAAMS,YAAYV,IAAgBW,IAAK,EAAKV,MAAMW,OAAOZ,GAAaW,IAAKE,IAAK,QAAUb,UAO9H,CACH,IAAIc,EAAWd,EACXe,EAAYf,EAAc,EAC9BD,EACI,yBAAKS,UAAU,SAEX,yBAAKA,UAAW,mBACZ,yBAAKC,QAAS,WAAQ,EAAKR,MAAMS,YAAYI,IAAaH,IAAK,EAAKV,MAAMW,OAAOE,GAAUH,IAAKE,IAAK,QAAUC,KAGnH,yBAAKN,UAAW,oBACZ,yBAAKC,QAAS,WAAQ,EAAKR,MAAMS,YAAYK,IAAcJ,IAAK,EAAKV,MAAMW,OAAOG,GAAWJ,IAAKE,IAAK,QAAUE,WA7BjIhB,EAAS,wCAoCb,OAAOA,EAEHO,OA1DhB,GAAiCU,aCMpBC,G,WAAc,SAACC,EAAaZ,EAAOa,GAE5C,IAAMP,EATQ,SAACQ,GAClB,IAAIR,EAAS,GAEb,OADAQ,EAAElC,OAAOV,KAAI,SAAC6C,EAAMC,GAAYV,EAAOS,EAAKE,QAAQ,KAAM,KAAOH,EAAEC,MAC5DT,EAMWY,CAAUC,OACzBC,QAAQC,IAAIf,GAuBZ,MAAO,CACHM,cACAZ,MAvBkB,WAElB,IADA,IAAIsB,EAAW,GACNC,EAAI,EAAGA,GAAKvB,EAAOuB,IAAK,CAC7B,IAAIC,EAAQlB,EAAO,SAASM,EAAY,IAAIA,EAAY,IAAIW,EAAE,QAE1D/B,GAAY,EACbqB,EAAeY,SAASF,KAAI/B,GAAY,GAC3C,IAAIkC,EAAS,CACTC,OAAQJ,EACRC,MAAOA,EACPhC,aAKJ8B,EAAWM,KAAKF,GAGpB,OAAOJ,EAKAO,MCtBFC,GCRGnB,EAAY,EAAG,EAAG,QDQlC,2MACItB,MAAQ,CACJO,aAAc,EACdmC,YAAa/C,OAAOgD,WACpBnC,cAAe,EACfoC,YAAa,EAAKtC,MAAMG,MAAME,MAAMC,OACpCiC,OAAO,EACPC,cAAc,EACd7B,OAAQ,IARhB,EAUI8B,WAAa,WAGL,IAFJ,IAAIC,EAAc,GAELC,EAAI,EAAGA,EAAI,EAAKjD,MAAM4C,YAAaK,IAAK,CAC7C,IAAId,EAAQ,IAAIe,MACZD,IAAM,EAAKjD,MAAM4C,YAAY,IAE7BT,EAAMgB,OAAS,WACX,EAAKC,SAAS,CAAEnC,OAAQ+B,EAAaF,cAAa,MAI1DE,EAAYT,KAAKJ,GACjBJ,QAAQC,IAAIgB,GAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKjD,MAAM4C,YAAaK,IACpClB,QAAQC,IAAI,UACZgB,EAAYC,GAAGjC,IAAM,EAAKV,MAAMG,MAAME,MAAMsC,GAAGd,OA3BnE,EAkCIkB,aAAe,WACX,IAAIC,EACAjD,EAAc,EAAKL,MAAMO,aACzB,EAAKP,MAAM0C,YAvCN,KAuCgD,IAAhBrC,GAAqBA,IAAe,EAAKC,MAAMG,MAAME,MAAMC,OAAO,EACvG0C,EAAS,GAETA,EAAS,EACHjD,EAAc,EAIhBA,EAAcA,EAFdA,GAA0B,GAOlC,EAAK+C,SAAS,CAAC5C,cAAe8C,EAAQ/C,aAAaF,KAlD3D,EAoDIkD,oBAAsB,WAClB,IAAIC,EAAQ,EAAKxD,MAAM0C,YACH,EAAK1C,MAAMQ,cAC3BgD,EAzDK,IA0DL,EAAKJ,SAAS,CAAC5C,cAAc,IACxB,EAAK4C,SAAS,CAAE5C,cAAe,KAzDhD,EA4DIiD,YAAc,WACV,EAAKL,SAAS,CAAEV,YAAa/C,OAAOgD,YAAc,EAAKU,eA7D/D,EA6EIK,SAAW,SAACxD,GAER,IACIG,EAAcH,EACN,EAAKF,MAAM6C,MAEnB,EAAKc,QAAQzD,GAEb,EAAKkD,SAAS,CAAE5C,cANA,EAM8BD,aAAcF,EAAawC,OAAO,KArF5F,EAwFIe,SAAW,WACP,IAAIvD,EAAc,EAAKL,MAAMO,aACzBK,EAAS,EAAKZ,MAAM4C,YAAY,GACpCvC,GAA4B,EAAKL,MAAMQ,eACrBI,IAAUP,EAAcO,GAC1C,EAAK+C,QAAQtD,IA7FrB,EA+FIwD,SAAW,WACP,IAAIxD,EAAc,EAAKL,MAAMO,aAChB,EAAKP,MAAM4C,aACxBvC,GAA4B,EAAKL,MAAMQ,eACxB,IAAGH,EAAc,GAChC,EAAK+C,SAAS,CAAC7C,aAAaF,GAAa,EAAKoD,cApGtD,EAsGIK,QAAU,WACN,EAAKV,SAAS,CAAC7C,aAAa,GAAG,EAAK8C,eAvG5C,EAyGIU,OAAS,WACL,EAAKX,SAAS,CAAE7C,aAAc,EAAKD,MAAMG,MAAME,MAAMC,OAAO,EAAGJ,cAAe,KA1GtF,EA4GIwD,QAAU,WACN,OAAgC,IAA5B,EAAKhE,MAAMO,cAAsB,EAAKP,MAAMO,eAAiB,EAAKP,MAAMiE,YA7GpF,EAiHIN,QAAU,SAACzD,GACP,IACIG,EADAG,EAAgB,EAAKR,MAAMQ,cAE3B0D,EAAa,EAAKlE,MAAM0C,aACvB,EAAKsB,WAAaE,EAvHd,MAyHL1D,EAAgB,GAMZH,EAJc,IAAlBG,GAEIN,EAAK,KAAMA,EAAO,GAEJA,EAAK,EAKTA,EAKlB,EAAKkD,SAAS,CAAEP,OAAO,EAAOtC,aAAcF,GAAc,EAAKgD,eAvIvE,EAyIIc,mBAAqB,WAIjB,IAHA,IAAI3D,EAAgB,EAAKR,MAAMQ,cAC3BH,EAAc,EAAKL,MAAMO,aACzB0B,EAAa,GACVA,EAAWrB,OAASJ,GACvByB,EAAWM,KAAKlC,GAChBA,GAAe,EAEnB,OAAO4B,GAjJf,EAmJImC,SAAW,SAAClE,GAER,QADmB,EAAKiE,qBACPE,MAAK,SAAAC,GAAQ,OAAOA,IAAOpE,MArJpD,EAuKIqE,gBAAkB,WACd,EAAKnB,SAAS,CAAEN,cAAc,KAxKtC,mFAgEyB,IAAD,OAEhB0B,KAAKf,cAEL9D,OAAO8E,iBAAiB,SAAUD,KAAKf,aACvC9D,OAAO8E,iBAAiB,WAAW,SAACrF,GACd,KAAdA,EAAEsF,SAAkB,EAAKb,WACZ,KAAbzE,EAAEsF,SAAe,EAAKd,gBAvEtC,6CA2EQjE,OAAOgF,oBAAoB,SAASH,KAAKf,eA3EjD,oCA4JkBmB,GAGV,IAHkB,IAAD,OACbC,EAAO,GAEF5B,EAAI,EAAGA,EAAI2B,EAAMhE,OAAQqC,IAAI,CAClC,IAAI/C,EAAO+C,EACX4B,EAAKtC,KAAKrC,GAId,OAFe2E,EAAKhG,KAAI,SAAAyF,GACpB,OAAO,0BAAMxD,QAAS,WAAQ,EAAK6C,QAAQW,IAAOQ,IAAK,OAAOR,EAAIzD,UAAW,YAAY,EAAKuD,SAASE,GAAI,SAAS,OAAa,IAALA,EAAO,QAAQA,IAAKM,EAAMhE,OAAO,EAAE,OAAO,SApKlL,+BA6KQ,OADA4D,KAAKxE,MAAM8C,cAAc0B,KAAKzB,aAG1B,yBAAKlC,UAAU,eACX,yBAAKA,UAAU,gBAAf,UAAqC,0BAAMA,UAAU,SAAhB,MAA4B2D,KAAKlE,MAAMG,MAAMc,cAClF,yBAAKV,UAAU,eACX,kBAAC,EAAD,CAAaH,OAAQ8D,KAAKxE,MAAM8C,aAAc7B,OAAQuD,KAAKxE,MAAMiB,OAAQyB,YAAa8B,KAAKxE,MAAM0C,YAAa3B,YAAayD,KAAKd,SAASlD,cAAegE,KAAKxE,MAAMQ,cAAcC,MAAO+D,KAAKlE,MAAMG,MAAOF,aAAciE,KAAKxE,MAAMO,gBAGvO,yBAAKM,UAAU,UACX,yBAAKA,UAAU,QAAQC,QAAS0D,KAAKX,UAAU,uBAAGhD,UAAU,uBAC5D,yBAAKA,UAAU,WAAW2D,KAAKO,cAAcP,KAAKlE,MAAMG,MAAME,QAC9D,yBAAKE,UAAU,QAAQC,QAAS0D,KAAKZ,UAAU,uBAAG/C,UAAU,yBAGhE,gCACI,qCAAU,0BAAMA,UAAU,SAAS2D,KAAKlE,MAAMG,MAAMc,aAApD,iBAAqF,0BAAMV,UAAU,SAAhB,4BA5LzG,GAA4BQ,cEHtB2D,G,MCN4B3D,YDMhBC,EAAY,EAAE,EAAE,CAAC,EAAE,KAIpC2D,IAASC,OAAO,kBAAC,EAAD,CAAQzE,MAAOuE,IAAeG,SAASC,eAAe,SLoHjE,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,c","file":"static/js/main.30c2b009.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1-0.223e9025.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var map = {\n\t\"./DUNSEL1/1-0.png\": 6,\n\t\"./DUNSEL1/1-1.png\": 19,\n\t\"./DUNSEL1/1-2.png\": 20,\n\t\"./DUNSEL1/1-3.png\": 21,\n\t\"./DUNSEL1/1-4.png\": 22,\n\t\"./DUNSEL1/1-5.png\": 23,\n\t\"./DUNSEL1/1-6.png\": 24,\n\t\"./DUNSEL1/1-7.png\": 25\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 18;","module.exports = __webpack_public_path__ + \"static/media/1-1.b52d5da7.png\";","module.exports = __webpack_public_path__ + \"static/media/1-2.1cade47f.png\";","module.exports = __webpack_public_path__ + \"static/media/1-3.d203b031.png\";","module.exports = __webpack_public_path__ + \"static/media/1-4.b5d33577.png\";","module.exports = __webpack_public_path__ + \"static/media/1-5.40ef82d3.png\";","module.exports = __webpack_public_path__ + \"static/media/1-6.b7567596.png\";","module.exports = __webpack_public_path__ + \"static/media/1-7.7e302c4f.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nexport class PageDisplay extends Component{\r\n  \r\n    state = {\r\n   \r\n        \r\n    }\r\n    orient = (page) => { //returns rotate information for className\r\n        if (page.landscape) {\r\n            return \"landscape\"\r\n        } else { return \"portrait\"}\r\n    }\r\n   \r\n    render() {\r\n        \r\n        const pages = () => {\r\n            let panels;\r\n            const currentPage = this.props.currentPages;\r\n            const issue = this.props.issue;\r\n            const displayAmount = this.props.displayAmount;\r\n            if (!this.props.loaded) {\r\n                panels = <h1>LOADING.</h1>\r\n\r\n                \r\n            } else {\r\n                \r\n                if (displayAmount === 1 || currentPage === 0 || currentPage === this.props.issue.pages.length - 1) {\r\n                    panels = (\r\n                        <div className=\"pages\">\r\n                       \r\n                            <div className={\"frame single \" + this.orient(this.props.issue.pages[currentPage])}>\r\n                            \r\n                                <img onClick={() => { this.props.handleClick(currentPage) }} src={this.props.images[currentPage].src} alt={\"Page \" + currentPage} />\r\n                            </div>\r\n                    \r\n                            \r\n                        </div>\r\n                    )\r\n                \r\n                } else {\r\n                    let leftPage = currentPage;\r\n                    let rightPage = currentPage + 1\r\n                    panels = (\r\n                        <div className=\"pages\">\r\n                       \r\n                            <div className={\"frame \" + \"Dual \" + \"left\"} >\r\n                                <img onClick={() => { this.props.handleClick(leftPage) }} src={this.props.images[leftPage].src} alt={\"Page \" + leftPage} />\r\n                            </div>\r\n                   \r\n                            <div className={\"frame \" + \"Dual \" + \"right\"} >\r\n                                <img onClick={() => { this.props.handleClick(rightPage) }} src={this.props.images[rightPage].src} alt={\"Page \" + rightPage} />\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n            return panels;\r\n        }\r\n        return (pages())\r\n        }\r\n        \r\n            \r\n}\r\n","import React from 'react'\r\n const importAll =(r)=>{  \r\n let images = {};\r\n r.keys().map((item, index) => { images[item.replace('./', '')] = r(item); });\r\n return images;\r\n}\r\n\r\n\r\nexport const createIssue = (issueNumber, pages, landscapeArray) => {\r\n \r\n    const images = importAll(require.context(`./imgs/`, true, /\\.(png|jpe?g|svg)$/));\r\n    console.log(images)\r\n\r\n    const pagesAssigner = () => {\r\n        let pagesArray=[]\r\n        for (let p = 0; p <= pages; p++) {\r\n            let image = images[\"DUNSEL\"+issueNumber+\"/\"+issueNumber+\"-\"+p+\".png\"]\r\n            \r\n            let landscape = false;\r\n            if(landscapeArray.includes(p)){landscape = true}\r\n            let newPage ={\r\n                number: p,\r\n                image: image,\r\n                landscape\r\n                \r\n\r\n                \r\n            }\r\n            pagesArray.push(newPage)\r\n            \r\n        }\r\n        return pagesArray;\r\n    }\r\n\r\n    return {\r\n        issueNumber,\r\n        pages: pagesAssigner()\r\n    }\r\n }","import React, { Component } from 'react';\r\nimport {PageDisplay} from './pageDisplay'\r\nimport './SlideStyle.css';\r\nimport { ImageTest } from './testImage'\r\nimport {Imageimport} from './imageimport'\r\n\r\nconst queryReport = () => {\r\n   return  window.matchMedia(\"(max-width: 1000px)\").matches\r\n}\r\n\r\n\r\nconst max2Panel = 40;\r\nconst minWidth = 900\r\n\r\nexport class Slider extends Component{\r\n    state = {\r\n        currentPages: 0,\r\n        screenWidth: window.innerWidth,\r\n        displayAmount: 2,\r\n        issueLength: this.props.issue.pages.length,\r\n        focus: false,\r\n        imagesLoaded: false,\r\n        images: []\r\n    }\r\n    loadImages = () => {\r\n        let imagesArray = []\r\n        \r\n            for (let i = 0; i < this.state.issueLength; i++) {\r\n                let image = new Image()\r\n                if (i === this.state.issueLength-1) {\r\n                    \r\n                    image.onload = ()=>{\r\n                        this.setState({ images: imagesArray, imagesLoaded:true})\r\n                    \r\n                    }\r\n                }\r\n                imagesArray.push(image)\r\n                console.log(imagesArray)\r\n                }\r\n            for (let i = 0; i < this.state.issueLength; i++) {\r\n                    console.log('hello!')\r\n                    imagesArray[i].src = this.props.issue.pages[i].image\r\n                }\r\n            \r\n           \r\n            }\r\n        \r\n    \r\n    displayLogic = () => {\r\n        let amount;\r\n        let currentPage = this.state.currentPages\r\n        if (this.state.screenWidth < minWidth || currentPage === 0 || currentPage=== this.props.issue.pages.length-1) {\r\n            amount = 1;\r\n        } else {\r\n            amount = 2;\r\n            if (!(currentPage % 2)) {\r\n                \r\n                currentPage = currentPage-1;\r\n            } else {\r\n                currentPage = currentPage;\r\n            }\r\n        } \r\n        \r\n        \r\n        this.setState({displayAmount: amount, currentPages:currentPage})\r\n    }\r\n    updateDisplayAmount = () => {\r\n        let width = this.state.screenWidth;\r\n        let displayAmount = this.state.displayAmount;\r\n        if (width < minWidth) {\r\n            this.setState({displayAmount:1})\r\n        } else { this.setState({ displayAmount: 2 }) }\r\n        \r\n    }\r\n    updateWidth = () => {\r\n        this.setState({ screenWidth: window.innerWidth }, this.displayLogic)\r\n\r\n    }\r\n    componentDidMount() {\r\n        \r\n        this.updateWidth();\r\n        \r\n        window.addEventListener('resize', this.updateWidth)\r\n        window.addEventListener('keydown', (e) => {\r\n            if (e.keyCode === 37) { this.prevPage() }\r\n            if (e.keyCode ===39){this.nextPage()}\r\n        })\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize',this.updateWidth)\r\n    }\r\n    setFocus = (page) => {\r\n        \r\n        let displayAmount = 1\r\n        let currentPage = page;\r\n        let focus = this.state.focus\r\n        if (focus) {\r\n            this.setPage(page)\r\n        } else {\r\n            this.setState({ displayAmount: displayAmount, currentPages: currentPage, focus: true })\r\n        }\r\n    }\r\n    nextPage = () => {\r\n        let currentPage = this.state.currentPages;\r\n        let length = this.state.issueLength-1\r\n        currentPage = currentPage + this.state.displayAmount;\r\n        if (currentPage > length) { currentPage = length; }\r\n        this.setPage(currentPage)\r\n    }\r\n    prevPage = () => {\r\n        let currentPage = this.state.currentPages;\r\n        let length = this.state.issueLength-1\r\n        currentPage = currentPage - this.state.displayAmount;\r\n        if(currentPage<0){currentPage = 0}\r\n        this.setState({currentPages:currentPage},this.updateWidth)\r\n    }\r\n    toCover = () => {\r\n        this.setState({currentPages:0},this.displayLogic)\r\n    }\r\n    toBack = () => {\r\n        this.setState({ currentPages: this.props.issue.pages.length-1, displayAmount: 1 })\r\n    }\r\n    onCover = () => {\r\n        if (this.state.currentPages === 0 || this.state.currentPages === this.state.issueLenth) {\r\n            return true\r\n        } else { return false}\r\n    }\r\n    setPage = (page) => {\r\n        let displayAmount = this.state.displayAmount;\r\n        let currentPage;\r\n        let widthCheck = this.state.screenWidth;\r\n        if (!this.onCover() && widthCheck > minWidth) {\r\n            \r\n            displayAmount = 2;\r\n        }\r\n        if (displayAmount === 2) { \r\n            \r\n            if (page>0 &&!(page % 2)) {\r\n                \r\n                currentPage = page-1;\r\n            } else {\r\n                currentPage = page;\r\n            }\r\n        } else {\r\n            currentPage = page;\r\n        }\r\n            \r\n        \r\n        \r\n        this.setState({ focus: false, currentPages: currentPage },this.displayLogic);\r\n    }\r\n    currentlyDisplayed = () => {//returns array of current pages\r\n        let displayAmount = this.state.displayAmount;\r\n        let currentPage = this.state.currentPages;\r\n        let pagesArray = [];\r\n        while (pagesArray.length < displayAmount) {\r\n            pagesArray.push(currentPage);\r\n            currentPage += 1;\r\n        }\r\n        return pagesArray;\r\n    }\r\n    isViewed = (page) => {\r\n        let currentPages = this.currentlyDisplayed()\r\n        if (currentPages.some(el => { return el === page })) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    \r\n    createNavBtns(array) {\r\n        let btns = []\r\n        \r\n        for (let i = 0; i < array.length; i++){\r\n            let page = i\r\n            btns.push(page)\r\n        }\r\n        let elements = btns.map(el => {\r\n            return <span onClick={() => { this.setPage(el) }} key={\"page\"+el} className={\"pageBtn \"+(this.isViewed(el)?\"viewed\":null)}>{el===0?\"front\":el===array.length-1?\"back\":\"\"}</span> })\r\n        return elements;\r\n    }\r\n    setImagesLoaded = () => {\r\n        this.setState({ imagesLoaded: true });\r\n    }\r\n   \r\n    render() {\r\n    if(!this.state.imagesLoaded){this.loadImages()}\r\n        return (\r\n            \r\n            <div className=\"imageSlider\">\r\n                <div className=\"sliderHeader\">DUNSEL <span className='light'>no.{this.props.issue.issueNumber}</span></div>\r\n                <div className=\"imageWindow\">\r\n                    <PageDisplay loaded={this.state.imagesLoaded} images={this.state.images} screenWidth={this.state.screenWidth} handleClick={this.setFocus}displayAmount={this.state.displayAmount}issue={this.props.issue} currentPages={this.state.currentPages}></PageDisplay>\r\n                    \r\n                </div>\r\n                <div className=\"navBar\">\r\n                    <div className=\"arrow\" onClick={this.prevPage}><i className=\"fas fa-caret-left\"></i></div>\r\n                    <div className=\"pageNav\">{this.createNavBtns(this.props.issue.pages)}</div>\r\n                    <div className=\"arrow\" onClick={this.nextPage}><i className=\"fas fa-caret-right\"></i></div>\r\n                    \r\n                </div>\r\n                <footer>\r\n                    <p>Dunsel <span className=\"light\">{this.props.issue.issueNumber}</span> @Dunsel_fahq <span className=\"light\"> By Luke H. Berry</span></p>\r\n                </footer>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Cover from './imgs/DUNSEL1/1-0.png'\r\nimport {createIssue} from './issueCreator';\r\n\r\n// Import all images in image folder\r\n\r\nlet testIssue = createIssue(1, 1, \"none\");\r\n\r\nexport const Imageimport = () => {\r\n    console.log(testIssue)\r\n    return (\r\n        <div>\r\n            <img src={testIssue.pages[0].image} alt=\"cover\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Slider } from './Slider';\nimport { createIssue } from './issueCreator';\nimport { ImageDisplay } from './ImageDisplay.js'\n\n\n\nconst testIssue = createIssue(1,7,[5,6])\n//<Slider issue=xxx />\n//ReactDOM.render(<ImageDisplay/>, document.getElementById('root'));\n//ReactDOM.render(<Imageimport />, document.getElementById(\"root\"));\n ReactDOM.render(<Slider issue={testIssue} />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\r\nimport './ImageDisplay.css';\r\nimport IM from './imgs/DUNSEL1/1-0.png'\r\n\r\n\r\nexport class ImageDisplay extends Component{\r\n    state = {\r\n        loaded: false\r\n    }\r\n    imageLoaded = () => {\r\n    this.setState({loaded:true})\r\n    }\r\n    loadImages = (amt) => {\r\n        let imagesArray = []\r\n        for (let i = 0; i < amt; i++) {\r\n            let image = new Image()\r\n            if (i === 3) {\r\n                \r\n                image.onload = ()=>{\r\n                    this.setState({ images: imagesArray }, this.imageLoaded)\r\n                \r\n                }\r\n            }\r\n            imagesArray.push(image)\r\n            console.log(imagesArray)\r\n            }\r\n        for (let i = 0; i < amt; i++) {\r\n                console.log('hello!')\r\n                imagesArray[i].src = `https://picsum.photos/${1000 + i}/5000`\r\n            }\r\n        \r\n       \r\n        }\r\n    \r\n    render() {\r\n    \r\n    \r\n        if (!this.state.loaded) {\r\n            this.loadImages(4);\r\n            return (<h1>Loading...</h1>)\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <h1>working</h1>\r\n                    \r\n                    <img src={this.state.images[0].src} alt=\"loadedImg\" />\r\n                    <img src={this.state.images[3].src} alt=\"image2\" />\r\n\r\n                </div>\r\n            )\r\n            \r\n        }\r\n    }\r\n}"],"sourceRoot":""}