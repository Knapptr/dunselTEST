{"version":3,"sources":["imgs/DUNSEL1/1-0.png","logo.svg","imgs sync /.(png|jpe?g|svg)$","imgs/DUNSEL1/1-1.png","imgs/DUNSEL1/1-2.png","imgs/DUNSEL1/1-3.png","imgs/DUNSEL1/1-4.png","imgs/DUNSEL1/1-5.png","imgs/DUNSEL1/1-6.png","imgs/DUNSEL1/1-7.png","serviceWorker.js","pageDisplay.js","issueCreator.js","Slider.jsx","imageimport.js","ImageDisplay.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Boolean","window","location","hostname","match","PageDisplay","state","loaded","orient","page","landscape","loadImages","issueArray","pages","images","forEach","el","imgElement","Image","src","image","push","console","log","setState","panels","currentPage","props","currentPages","displayAmount","issue","length","className","onClick","handleClick","alt","leftPage","rightPage","Component","createIssue","issueNumber","landscapeArray","r","item","index","replace","importAll","require","pagesArray","p","includes","newPage","number","pagesAssigner","Slider","screenWidth","innerWidth","issueLength","focus","displayLogic","amount","updateDisplayAmount","width","updateWidth","setFocus","setPage","nextPage","prevPage","toCover","toBack","onCover","issueLenth","widthCheck","currentlyDisplayed","isViewed","some","setImagesLoaded","imagesLoaded","this","addEventListener","keyCode","removeEventListener","array","btns","i","key","onLoad","createNavBtns","testIssue","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.82722826.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1-0.223e9025.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var map = {\n\t\"./DUNSEL1/1-0.png\": 7,\n\t\"./DUNSEL1/1-1.png\": 19,\n\t\"./DUNSEL1/1-2.png\": 20,\n\t\"./DUNSEL1/1-3.png\": 21,\n\t\"./DUNSEL1/1-4.png\": 22,\n\t\"./DUNSEL1/1-5.png\": 23,\n\t\"./DUNSEL1/1-6.png\": 24,\n\t\"./DUNSEL1/1-7.png\": 25\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 18;","module.exports = __webpack_public_path__ + \"static/media/1-1.b52d5da7.png\";","module.exports = __webpack_public_path__ + \"static/media/1-2.1cade47f.png\";","module.exports = __webpack_public_path__ + \"static/media/1-3.d203b031.png\";","module.exports = __webpack_public_path__ + \"static/media/1-4.b5d33577.png\";","module.exports = __webpack_public_path__ + \"static/media/1-5.40ef82d3.png\";","module.exports = __webpack_public_path__ + \"static/media/1-6.b7567596.png\";","module.exports = __webpack_public_path__ + \"static/media/1-7.7e302c4f.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nexport class PageDisplay extends Component{\r\n  \r\n    state = {\r\n        loaded: false\r\n    }\r\n    orient = (page) => { //returns rotate information for className\r\n        if (page.landscape) {\r\n            return \"landscape\"\r\n        } else { return \"portrait\"}\r\n    }\r\n    loadImages = (issueArray) => {\r\n        let pages = issueArray.pages\r\n        let images = [];\r\n        pages.forEach(el => {\r\n            let imgElement = new Image();\r\n            imgElement.src = el.image\r\n            images.push(imgElement)\r\n        })\r\n        console.log(\"loaded?\")\r\n        this.setState({loaded: true})\r\n        return images;\r\n        \r\n    }\r\n    render() {\r\n        let images;\r\n        const pages = () => {\r\n            let panels;\r\n            const currentPage = this.props.currentPages;\r\n            const issue = this.props.issue;\r\n            const displayAmount = this.props.displayAmount;\r\n            if (!this.state.loaded) {\r\n                panels = <h1>LOADING.</h1>\r\n                images = this.loadImages(this.props.issue);\r\n            } else {\r\n                if (displayAmount === 1 || currentPage === 0 || currentPage === this.props.issue.pages.length - 1) {\r\n                    panels = (\r\n                        <div className=\"pages\">\r\n                       \r\n                            <div className={\"frame single \" + this.orient(this.props.issue.pages[currentPage])}>\r\n                            \r\n                                <img onClick={() => { this.props.handleClick(currentPage) }} src={this.props.issue.pages[currentPage].image} alt={\"Page \" + currentPage} />\r\n                            </div>\r\n                    \r\n                            \r\n                        </div>\r\n                    )\r\n                \r\n                } else {\r\n                    let leftPage = currentPage;\r\n                    let rightPage = currentPage + 1\r\n                    panels = (\r\n                        <div className=\"pages\">\r\n                       \r\n                            <div className={\"frame \" + \"Dual \" + \"left\"} >\r\n                                <img onClick={() => { this.props.handleClick(leftPage) }} src={this.props.issue.pages[leftPage].image} alt={\"Page \" + leftPage} />\r\n                            </div>\r\n                   \r\n                            <div className={\"frame \" + \"Dual \" + \"right\"} >\r\n                                <img onClick={() => { this.props.handleClick(rightPage) }} src={this.props.issue.pages[rightPage].image} alt={\"Page \" + rightPage} />\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    )\r\n                }\r\n            }\r\n            return panels;\r\n        }\r\n        return (pages())\r\n            \r\n    }\r\n}","import React from 'react'\r\n const importAll =(r)=>{  \r\n let images = {};\r\n r.keys().map((item, index) => { images[item.replace('./', '')] = r(item); });\r\n return images;\r\n}\r\n\r\n\r\nexport const createIssue = (issueNumber, pages, landscapeArray) => {\r\n \r\n    const images = importAll(require.context(`./imgs/`, true, /\\.(png|jpe?g|svg)$/));\r\n    console.log(images)\r\n\r\n    const pagesAssigner = () => {\r\n        let pagesArray=[]\r\n        for (let p = 0; p <= pages; p++) {\r\n            let image = images[\"DUNSEL\"+issueNumber+\"/\"+issueNumber+\"-\"+p+\".png\"]\r\n            \r\n            let landscape = false;\r\n            if(landscapeArray.includes(p)){landscape = true}\r\n            let newPage ={\r\n                number: p,\r\n                image: image,\r\n                landscape\r\n                \r\n\r\n                \r\n            }\r\n            pagesArray.push(newPage)\r\n            \r\n        }\r\n        return pagesArray;\r\n    }\r\n\r\n    return {\r\n        issueNumber,\r\n        pages: pagesAssigner()\r\n    }\r\n }","import React, { Component } from 'react';\r\nimport {PageDisplay} from './pageDisplay'\r\nimport './SlideStyle.css';\r\nimport { ImageTest } from './testImage'\r\nimport {Imageimport} from './imageimport'\r\n\r\nconst queryReport = () => {\r\n   return  window.matchMedia(\"(max-width: 1000px)\").matches\r\n}\r\n\r\n\r\nconst max2Panel = 40;\r\nconst minWidth = 900\r\n\r\nexport class Slider extends Component{\r\n    state = {\r\n        currentPages: 0,\r\n        screenWidth: window.innerWidth,\r\n        displayAmount: 2,\r\n        issueLength: this.props.issue.pages.length,\r\n        focus: false\r\n    }\r\n    displayLogic = () => {\r\n        let amount;\r\n        let currentPage = this.state.currentPages\r\n        if (this.state.screenWidth < minWidth || currentPage === 0 || currentPage=== this.props.issue.pages.length-1) {\r\n            amount = 1;\r\n        } else {\r\n            amount = 2;\r\n            if (!(currentPage % 2)) {\r\n                \r\n                currentPage = currentPage-1;\r\n            } else {\r\n                currentPage = currentPage;\r\n            }\r\n        } \r\n        \r\n        \r\n        this.setState({displayAmount: amount, currentPages:currentPage})\r\n    }\r\n    updateDisplayAmount = () => {\r\n        let width = this.state.screenWidth;\r\n        let displayAmount = this.state.displayAmount;\r\n        if (width < minWidth) {\r\n            this.setState({displayAmount:1})\r\n        } else { this.setState({ displayAmount: 2 }) }\r\n        \r\n    }\r\n    updateWidth = () => {\r\n        this.setState({ screenWidth: window.innerWidth }, this.displayLogic)\r\n\r\n    }\r\n    componentDidMount() {\r\n        \r\n        this.updateWidth();\r\n        \r\n        window.addEventListener('resize', this.updateWidth)\r\n        window.addEventListener('keydown', (e) => {\r\n            if (e.keyCode === 37) { this.prevPage() }\r\n            if (e.keyCode ===39){this.nextPage()}\r\n        })\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize',this.updateWidth)\r\n    }\r\n    setFocus = (page) => {\r\n        \r\n        let displayAmount = 1\r\n        let currentPage = page;\r\n        let focus = this.state.focus\r\n        if (focus) {\r\n            this.setPage(page)\r\n        } else {\r\n            this.setState({ displayAmount: displayAmount, currentPages: currentPage, focus: true })\r\n        }\r\n    }\r\n    nextPage = () => {\r\n        let currentPage = this.state.currentPages;\r\n        let length = this.state.issueLength-1\r\n        currentPage = currentPage + this.state.displayAmount;\r\n        if (currentPage > length) { currentPage = length; }\r\n        this.setPage(currentPage)\r\n    }\r\n    prevPage = () => {\r\n        let currentPage = this.state.currentPages;\r\n        let length = this.state.issueLength-1\r\n        currentPage = currentPage - this.state.displayAmount;\r\n        if(currentPage<0){currentPage = 0}\r\n        this.setState({currentPages:currentPage},this.updateWidth)\r\n    }\r\n    toCover = () => {\r\n        this.setState({currentPages:0},this.displayLogic)\r\n    }\r\n    toBack = () => {\r\n        this.setState({ currentPages: this.props.issue.pages.length-1, displayAmount: 1 })\r\n    }\r\n    onCover = () => {\r\n        if (this.state.currentPages === 0 || this.state.currentPages === this.state.issueLenth) {\r\n            return true\r\n        } else { return false}\r\n    }\r\n    setPage = (page) => {\r\n        let displayAmount = this.state.displayAmount;\r\n        let currentPage;\r\n        let widthCheck = this.state.screenWidth;\r\n        if (!this.onCover() && widthCheck > minWidth) {\r\n            \r\n            displayAmount = 2;\r\n        }\r\n        if (displayAmount === 2) { \r\n            \r\n            if (page>0 &&!(page % 2)) {\r\n                \r\n                currentPage = page-1;\r\n            } else {\r\n                currentPage = page;\r\n            }\r\n        } else {\r\n            currentPage = page;\r\n        }\r\n            \r\n        \r\n        \r\n        this.setState({ focus: false, currentPages: currentPage },this.displayLogic);\r\n    }\r\n    currentlyDisplayed = () => {//returns array of current pages\r\n        let displayAmount = this.state.displayAmount;\r\n        let currentPage = this.state.currentPages;\r\n        let pagesArray = [];\r\n        while (pagesArray.length < displayAmount) {\r\n            pagesArray.push(currentPage);\r\n            currentPage += 1;\r\n        }\r\n        return pagesArray;\r\n    }\r\n    isViewed = (page) => {\r\n        let currentPages = this.currentlyDisplayed()\r\n        if (currentPages.some(el => { return el === page })) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    \r\n    createNavBtns(array) {\r\n        let btns = []\r\n        \r\n        for (let i = 0; i < array.length; i++){\r\n            let page = i\r\n            btns.push(page)\r\n        }\r\n        let elements = btns.map(el => {\r\n            return <span onClick={() => { this.setPage(el) }} key={\"page\"+el} className={\"pageBtn \"+(this.isViewed(el)?\"viewed\":null)}>{el===0?\"front\":el===array.length-1?\"back\":\"\"}</span> })\r\n        return elements;\r\n    }\r\n    setImagesLoaded = () => {\r\n        this.setState({ imagesLoaded: true });\r\n    }\r\n   \r\n    render() {\r\n        return (\r\n            \r\n            <div className=\"imageSlider\">\r\n                <button onClick={this.setImagesLoaded}>Push After Load</button>\r\n                <div className=\"sliderHeader\">DUNSEL <span className='light'>no.{this.props.issue.issueNumber}</span></div>\r\n                <div className=\"imageWindow\">\r\n                    <PageDisplay onLoad={this.setImagesLoaded}loaded={this.state.imagesLoaded} screenWidth={this.state.screenWidth} handleClick={this.setFocus}displayAmount={this.state.displayAmount}issue={this.props.issue} currentPages={this.state.currentPages}></PageDisplay>\r\n                    \r\n                </div>\r\n                <div className=\"navBar\">\r\n                    <div className=\"arrow\" onClick={this.prevPage}><i className=\"fas fa-caret-left\"></i></div>\r\n                    <div className=\"pageNav\">{this.createNavBtns(this.props.issue.pages)}</div>\r\n                    <div className=\"arrow\" onClick={this.nextPage}><i className=\"fas fa-caret-right\"></i></div>\r\n                    \r\n                </div>\r\n                <footer>\r\n                    <p>Dunsel <span className=\"light\">{this.props.issue.issueNumber}</span> @Dunsel_fahq <span className=\"light\"> By Luke H. Berry</span></p>\r\n                </footer>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport Cover from './imgs/DUNSEL1/1-0.png'\r\nimport {createIssue} from './issueCreator';\r\n\r\n// Import all images in image folder\r\n\r\nlet testIssue = createIssue(1, 1, \"none\");\r\n\r\nexport const Imageimport = () => {\r\n    console.log(testIssue)\r\n    return (\r\n        <div>\r\n            <img src={testIssue.pages[0].image} alt=\"cover\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './ImageDisplay.css';\r\nlet imageVar = <img  src='./imgs/DUNSEL1/1-5.png' alt=\"image\" />\r\nconst tester = new Image()\r\ntester.src = \"./imgs/DUNSEL1/1-0.png\"\r\n\r\nexport const ImageDisplay = () => {\r\n    return (\r\n        <div id=\"container\">\r\n            {/* <div className=\"spread\">\r\n                <div className=\"frame\">\r\n                    <img className=\"ldsc\" src=\"./imgs/DUNSEL1/1-5.png\" alt=\"landscapeImg\" />\r\n                </div> */}\r\n            \r\n            \r\n            {/* </div>\r\n            <div className=\"spread\">\r\n                <div className=\"frame port\">\r\n                    <img className=\"portrait\"src=\"./imgs/DUNSEL1/1-0.png\" alt=\"portraitImg\"/>\r\n                </div>\r\n                <div className=\"frame port\">\r\n                <img className=\"portrait\"src=\"./imgs/DUNSEL1/1-0.png\" alt=\"portraitImg\"/>\r\n                </div>\r\n                \r\n            </div> */}\r\n        \r\n            <div className=\"spread\">\r\n                <div className=\"frame port\">\r\n                    <img className=\"ldsc port\"src=\"./imgs/DUNSEL1/1-5.png\" alt=\"portraitImg\"/>\r\n                </div>\r\n                <div className=\"frame port\">\r\n                    \r\n                    <img id=\"tester\" className=\"portrait\" src=\"./imgs/DUNSEL1/1-0.png\" alt=\"portraitImg\" />\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Slider } from './Slider';\nimport { createIssue } from './issueCreator';\nimport { ImageDisplay } from './ImageDisplay.js'\n\n\n\nconst testIssue = createIssue(1,7,[5,6])\n//<Slider issue=xxx />\n//ReactDOM.render(<ImageDisplay/>, document.getElementById('root'));\n//ReactDOM.render(<Imageimport />, document.getElementById(\"root\"));\n ReactDOM.render(<Slider issue={testIssue} />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}