{"version":3,"sources":["logo.svg","serviceWorker.js","pageDisplay.js","Slider.jsx","ImageDisplay.js","issueCreator.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","PageDisplay","orient","page","landscape","panels","currentPage","props","currentPages","issue","displayAmount","pages","length","className","onClick","handleClick","src","image","alt","leftPage","rightPage","Component","Slider","state","screenWidth","innerWidth","issueLength","focus","displayLogic","amount","setState","updateDisplayAmount","width","updateWidth","setFocus","setPage","nextPage","prevPage","toCover","toBack","onCover","issueLenth","widthCheck","currentlyDisplayed","pagesArray","push","isViewed","some","el","this","addEventListener","e","keyCode","removeEventListener","array","btns","i","map","key","issueNumber","class","createNavBtns","Image","landscapeArray","testIssue","p","includes","newPage","number","pagesAssigner","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,sMCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCChBOC,EAAb,2MAEIC,OAAS,SAACC,GACN,OAAIA,EAAKC,UACE,YACK,YALxB,wEAOc,IAAD,OAsCL,OArCc,WACV,IAAIC,EACEC,EAAc,EAAKC,MAAMC,aACjB,EAAKD,MAAME,MAEzB,GAAqB,IADC,EAAKF,MAAMG,eACO,IAAdJ,GAAmBA,IAAc,EAAKC,MAAME,MAAME,MAAMC,OAAO,EACrFP,EACI,yBAAKQ,UAAU,SAEX,yBAAKA,UAAW,gBAAgB,EAAKX,OAAO,EAAKK,MAAME,MAAME,MAAML,KAE/D,yBAAKQ,QAAS,WAAK,EAAKP,MAAMQ,YAAYT,IAAeU,IAAK,EAAKT,MAAME,MAAME,MAAML,GAAaW,MAAMD,IAAKE,IAAK,QAAQZ,UAOnI,CACH,IAAIa,EAAWb,EACXc,EAAYd,EAAY,EAC5BD,EACI,yBAAKQ,UAAU,SAEf,yBAAKA,UAAW,mBACR,yBAAKC,QAAS,WAAK,EAAKP,MAAMQ,YAAYI,IAAWH,IAAK,EAAKT,MAAME,MAAME,MAAMQ,GAAUF,MAAMD,IAAKE,IAAK,QAASC,KAGxH,yBAAKN,UAAW,oBAChB,yBAAMC,QAAS,WAAK,EAAKP,MAAMQ,YAAYK,IAAYJ,IAAK,EAAKT,MAAME,MAAME,MAAMS,GAAWH,MAAMD,IAAKE,IAAK,QAAQE,MAMlI,OAAOf,EAEHM,OA7ChB,GAAiCU,aCWpBC,G,MAAb,2MACIC,MAAQ,CACJf,aAAc,EACdgB,YAAa3B,OAAO4B,WACpBf,cAAe,EACfgB,YAAa,EAAKnB,MAAME,MAAME,MAAMC,OACpCe,OAAO,GANf,EAQIC,aAAe,WACX,IAAIC,EACAvB,EAAc,EAAKiB,MAAMf,aACzB,EAAKe,MAAMC,YAbN,KAagD,IAAhBlB,GAAqBA,IAAe,EAAKC,MAAME,MAAME,MAAMC,OAAO,EACvGiB,EAAS,GAETA,EAAS,EACHvB,EAAc,EAIhBA,EAAcA,EAFdA,GAA0B,GAOlC,EAAKwB,SAAS,CAACpB,cAAemB,EAAQrB,aAAaF,KAxB3D,EA0BIyB,oBAAsB,WAClB,IAAIC,EAAQ,EAAKT,MAAMC,YACH,EAAKD,MAAMb,cAC3BsB,EA/BK,IAgCL,EAAKF,SAAS,CAACpB,cAAc,IACxB,EAAKoB,SAAS,CAAEpB,cAAe,KA/BhD,EAkCIuB,YAAc,WACV,EAAKH,SAAS,CAAEN,YAAa3B,OAAO4B,YAAc,EAAKG,eAnC/D,EAmDIM,SAAW,SAAC/B,GAER,IACIG,EAAcH,EACN,EAAKoB,MAAMI,MAEnB,EAAKQ,QAAQhC,GAEb,EAAK2B,SAAS,CAAEpB,cANA,EAM8BF,aAAcF,EAAaqB,OAAO,KA3D5F,EA8DIS,SAAW,WACP,IAAI9B,EAAc,EAAKiB,MAAMf,aACzBI,EAAS,EAAKW,MAAMG,YAAY,GACpCpB,GAA4B,EAAKiB,MAAMb,eACrBE,IAAUN,EAAcM,GAC1C,EAAKuB,QAAQ7B,IAnErB,EAqEI+B,SAAW,WACP,IAAI/B,EAAc,EAAKiB,MAAMf,aAChB,EAAKe,MAAMG,aACxBpB,GAA4B,EAAKiB,MAAMb,eACxB,IAAGJ,EAAc,GAChC,EAAKwB,SAAS,CAACtB,aAAaF,GAAa,EAAK2B,cA1EtD,EA4EIK,QAAU,WACN,EAAKR,SAAS,CAACtB,aAAa,GAAG,EAAKoB,eA7E5C,EA+EIW,OAAS,WACL,EAAKT,SAAS,CAAEtB,aAAc,EAAKD,MAAME,MAAME,MAAMC,OAAO,EAAGF,cAAe,KAhFtF,EAkFI8B,QAAU,WACN,OAAgC,IAA5B,EAAKjB,MAAMf,cAAsB,EAAKe,MAAMf,eAAiB,EAAKe,MAAMkB,YAnFpF,EAuFIN,QAAU,SAAChC,GACP,IACIG,EADAI,EAAgB,EAAKa,MAAMb,cAE3BgC,EAAa,EAAKnB,MAAMC,aACvB,EAAKgB,WAAaE,EA7Fd,MA+FLhC,EAAgB,GAMZJ,EAJc,IAAlBI,GAEIP,EAAK,KAAMA,EAAO,GAEJA,EAAK,EAKTA,EAKlB,EAAK2B,SAAS,CAAEH,OAAO,EAAOnB,aAAcF,GAAc,EAAKsB,eA7GvE,EA+GIe,mBAAqB,WAIjB,IAHA,IAAIjC,EAAgB,EAAKa,MAAMb,cAC3BJ,EAAc,EAAKiB,MAAMf,aACzBoC,EAAa,GACVA,EAAWhC,OAASF,GACvBkC,EAAWC,KAAKvC,GAChBA,GAAe,EAEnB,OAAOsC,GAvHf,EAyHIE,SAAW,SAAC3C,GAER,QADmB,EAAKwC,qBACPI,MAAK,SAAAC,GAAQ,OAAOA,IAAO7C,MA3HpD,mFAsCyB,IAAD,OAEhB8C,KAAKhB,cAELpC,OAAOqD,iBAAiB,SAAUD,KAAKhB,aACvCpC,OAAOqD,iBAAiB,WAAW,SAACC,GACd,KAAdA,EAAEC,SAAkB,EAAKf,WACZ,KAAbc,EAAEC,SAAe,EAAKhB,gBA7CtC,6CAiDQvC,OAAOwD,oBAAoB,SAASJ,KAAKhB,eAjDjD,oCAkIkBqB,GAGV,IAHkB,IAAD,OACbC,EAAO,GAEFC,EAAI,EAAGA,EAAIF,EAAM1C,OAAQ4C,IAAI,CAClC,IAAIrD,EAAOqD,EACXD,EAAKV,KAAK1C,GAId,OAFeoD,EAAKE,KAAI,SAAAT,GACpB,OAAO,0BAAMlC,QAAS,WAAQ,EAAKqB,QAAQa,IAAOU,IAAK,OAAOV,EAAInC,UAAW,YAAY,EAAKiC,SAASE,GAAI,SAAS,OAAa,IAALA,EAAO,QAAQA,IAAKM,EAAM1C,OAAO,EAAE,OAAO,SA1IlL,+BAgJQ,OAEI,yBAAKC,UAAU,eACX,yBAAKA,UAAU,gBAAf,UAAqC,0BAAMA,UAAU,SAAhB,MAA4BoC,KAAK1C,MAAME,MAAMkD,cAClF,yBAAK9C,UAAU,eACX,kBAAC,EAAD,CAAaW,YAAayB,KAAK1B,MAAMC,YAAaT,YAAakC,KAAKf,SAASxB,cAAeuC,KAAK1B,MAAMb,cAAcD,MAAOwC,KAAK1C,MAAME,MAAOD,aAAcyC,KAAK1B,MAAMf,gBAG3K,yBAAKK,UAAU,UACX,yBAAKA,UAAU,QAAQC,QAASmC,KAAKZ,UAAU,uBAAGuB,MAAM,uBACxD,yBAAK/C,UAAU,WAAWoC,KAAKY,cAAcZ,KAAK1C,MAAME,MAAME,QAC9D,yBAAKE,UAAU,QAAQC,QAASmC,KAAKb,UAAU,uBAAGwB,MAAM,yBAG5D,gCACI,qCAAU,0BAAM/C,UAAU,SAASoC,KAAK1C,MAAME,MAAMkD,aAApD,iBAAqF,0BAAM9C,UAAU,SAAhB,4BA/JzG,GAA4BQ,c,MCXb,yBAAML,IAAI,yBAAyBE,IAAI,WACvC,IAAI4C,OACZ9C,IAAM,yBAEN,ICNqB2C,EAAahD,EAAMoD,ECUzCC,GDVmCrD,ECUT,EDVeoD,ECUb,CAAC,EAAE,GDa1B,CACHJ,YAxBoBA,ECUE,EDetBhD,MAvBkB,WAElB,IADA,IAAIiC,EAAW,GACNqB,EAAI,EAAGA,GAAKtD,EAAOsD,IAAI,CAC5B,IAAIhD,EAAQ,IAAI6C,MAChB7C,EAAMD,IAAO,gBAAkB2C,EAAc,IAAMA,EAAc,IAAMM,EAAI,OAC3E,IAAI7D,GAAY,EACb2D,EAAeG,SAASD,KAAI7D,GAAY,GAC3C,IAAI+D,EAAS,CACTC,OAAQH,EACRhD,MAAOA,EACPb,aAKJwC,EAAWC,KAAKsB,GAGpB,OAAOvB,EAKAyB,KCZdC,IAASC,OAAO,kBAAC,EAAD,CAAQ9D,MAAOuD,IAAeQ,SAASC,eAAe,SLsHjE,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.edbc5d07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nexport class PageDisplay extends Component{\r\n  \r\n    orient = (page) => { //returns rotate information for className\r\n        if (page.landscape) {\r\n            return \"landscape\"\r\n        } else { return \"portrait\"}\r\n    }\r\n    render() {\r\n        const pages = () => {\r\n            let panels;\r\n            const currentPage = this.props.currentPages;\r\n            const issue = this.props.issue;\r\n            const displayAmount = this.props.displayAmount;\r\n            if (displayAmount ===1 || currentPage===0 || currentPage===this.props.issue.pages.length-1) {\r\n                panels = (\r\n                    <div className=\"pages\">\r\n                       \r\n                        <div className={\"frame single \"+this.orient(this.props.issue.pages[currentPage])}>\r\n                            \r\n                            <img onClick={()=>{this.props.handleClick(currentPage)}} src={this.props.issue.pages[currentPage].image.src} alt={\"Page \"+currentPage} />\r\n                    </div>\r\n                    \r\n                            \r\n                    </div>\r\n                )\r\n                \r\n            } else {\r\n                let leftPage = currentPage;\r\n                let rightPage = currentPage+1\r\n                panels = (\r\n                    <div className=\"pages\">\r\n                       \r\n                    <div className={\"frame \"+\"Dual \" +\"left\"} >\r\n                            <img onClick={()=>{this.props.handleClick(leftPage)}}src={this.props.issue.pages[leftPage].image.src} alt={\"Page \"+ leftPage} />\r\n                    </div>\r\n                   \r\n                        <div className={\"frame \"+\"Dual \"+\"right\"} >\r\n                        <img  onClick={()=>{this.props.handleClick(rightPage)}}src={this.props.issue.pages[rightPage].image.src} alt={\"Page \"+rightPage}/>\r\n                    </div>\r\n                            \r\n                </div>\r\n                )\r\n            }\r\n            return panels;\r\n        }\r\n        return (pages())\r\n            \r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {PageDisplay} from './pageDisplay'\r\nimport './SlideStyle.css';\r\nimport {ImageTest} from './testImage'\r\n\r\nconst queryReport = () => {\r\n   return  window.matchMedia(\"(max-width: 1000px)\").matches\r\n}\r\n\r\n\r\nconst max2Panel = 40;\r\nconst minWidth = 900\r\n\r\nexport class Slider extends Component{\r\n    state = {\r\n        currentPages: 0,\r\n        screenWidth: window.innerWidth,\r\n        displayAmount: 2,\r\n        issueLength: this.props.issue.pages.length,\r\n        focus: false\r\n    }\r\n    displayLogic = () => {\r\n        let amount;\r\n        let currentPage = this.state.currentPages\r\n        if (this.state.screenWidth < minWidth || currentPage === 0 || currentPage=== this.props.issue.pages.length-1) {\r\n            amount = 1;\r\n        } else {\r\n            amount = 2;\r\n            if (!(currentPage % 2)) {\r\n                \r\n                currentPage = currentPage-1;\r\n            } else {\r\n                currentPage = currentPage;\r\n            }\r\n        } \r\n        \r\n        \r\n        this.setState({displayAmount: amount, currentPages:currentPage})\r\n    }\r\n    updateDisplayAmount = () => {\r\n        let width = this.state.screenWidth;\r\n        let displayAmount = this.state.displayAmount;\r\n        if (width < minWidth) {\r\n            this.setState({displayAmount:1})\r\n        } else { this.setState({ displayAmount: 2 }) }\r\n        \r\n    }\r\n    updateWidth = () => {\r\n        this.setState({ screenWidth: window.innerWidth }, this.displayLogic)\r\n\r\n    }\r\n    componentDidMount() {\r\n        \r\n        this.updateWidth();\r\n        \r\n        window.addEventListener('resize', this.updateWidth)\r\n        window.addEventListener('keydown', (e) => {\r\n            if (e.keyCode === 37) { this.prevPage() }\r\n            if (e.keyCode ===39){this.nextPage()}\r\n        })\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize',this.updateWidth)\r\n    }\r\n    setFocus = (page) => {\r\n        \r\n        let displayAmount = 1\r\n        let currentPage = page;\r\n        let focus = this.state.focus\r\n        if (focus) {\r\n            this.setPage(page)\r\n        } else {\r\n            this.setState({ displayAmount: displayAmount, currentPages: currentPage, focus: true })\r\n        }\r\n    }\r\n    nextPage = () => {\r\n        let currentPage = this.state.currentPages;\r\n        let length = this.state.issueLength-1\r\n        currentPage = currentPage + this.state.displayAmount;\r\n        if (currentPage > length) { currentPage = length; }\r\n        this.setPage(currentPage)\r\n    }\r\n    prevPage = () => {\r\n        let currentPage = this.state.currentPages;\r\n        let length = this.state.issueLength-1\r\n        currentPage = currentPage - this.state.displayAmount;\r\n        if(currentPage<0){currentPage = 0}\r\n        this.setState({currentPages:currentPage},this.updateWidth)\r\n    }\r\n    toCover = () => {\r\n        this.setState({currentPages:0},this.displayLogic)\r\n    }\r\n    toBack = () => {\r\n        this.setState({ currentPages: this.props.issue.pages.length-1, displayAmount: 1 })\r\n    }\r\n    onCover = () => {\r\n        if (this.state.currentPages === 0 || this.state.currentPages === this.state.issueLenth) {\r\n            return true\r\n        } else { return false}\r\n    }\r\n    setPage = (page) => {\r\n        let displayAmount = this.state.displayAmount;\r\n        let currentPage;\r\n        let widthCheck = this.state.screenWidth;\r\n        if (!this.onCover() && widthCheck > minWidth) {\r\n            \r\n            displayAmount = 2;\r\n        }\r\n        if (displayAmount === 2) { \r\n            \r\n            if (page>0 &&!(page % 2)) {\r\n                \r\n                currentPage = page-1;\r\n            } else {\r\n                currentPage = page;\r\n            }\r\n        } else {\r\n            currentPage = page;\r\n        }\r\n            \r\n        \r\n        \r\n        this.setState({ focus: false, currentPages: currentPage },this.displayLogic);\r\n    }\r\n    currentlyDisplayed = () => {//returns array of current pages\r\n        let displayAmount = this.state.displayAmount;\r\n        let currentPage = this.state.currentPages;\r\n        let pagesArray = [];\r\n        while (pagesArray.length < displayAmount) {\r\n            pagesArray.push(currentPage);\r\n            currentPage += 1;\r\n        }\r\n        return pagesArray;\r\n    }\r\n    isViewed = (page) => {\r\n        let currentPages = this.currentlyDisplayed()\r\n        if (currentPages.some(el => { return el === page })) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n    \r\n    createNavBtns(array) {\r\n        let btns = []\r\n        \r\n        for (let i = 0; i < array.length; i++){\r\n            let page = i\r\n            btns.push(page)\r\n        }\r\n        let elements = btns.map(el => {\r\n            return <span onClick={() => { this.setPage(el) }} key={\"page\"+el} className={\"pageBtn \"+(this.isViewed(el)?\"viewed\":null)}>{el===0?\"front\":el===array.length-1?\"back\":\"\"}</span> })\r\n        return elements;\r\n    }\r\n    \r\n   \r\n    render() {\r\n        return (\r\n            \r\n            <div className=\"imageSlider\">\r\n                <div className=\"sliderHeader\">DUNSEL <span className='light'>no.{this.props.issue.issueNumber}</span></div>\r\n                <div className=\"imageWindow\">\r\n                    <PageDisplay screenWidth={this.state.screenWidth} handleClick={this.setFocus}displayAmount={this.state.displayAmount}issue={this.props.issue} currentPages={this.state.currentPages}></PageDisplay>\r\n                    \r\n                </div>\r\n                <div className=\"navBar\">\r\n                    <div className=\"arrow\" onClick={this.prevPage}><i class=\"fas fa-caret-left\"></i></div>\r\n                    <div className=\"pageNav\">{this.createNavBtns(this.props.issue.pages)}</div>\r\n                    <div className=\"arrow\" onClick={this.nextPage}><i class=\"fas fa-caret-right\"></i></div>\r\n                    \r\n                </div>\r\n                <footer>\r\n                    <p>Dunsel <span className=\"light\">{this.props.issue.issueNumber}</span> @Dunsel_fahq <span className=\"light\"> By Luke H. Berry</span></p>\r\n                </footer>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './ImageDisplay.css';\r\nlet imageVar = <img  src='./imgs/DUNSEL1/1-5.png' alt=\"image\" />\r\nconst tester = new Image()\r\ntester.src = \"./imgs/DUNSEL1/1-0.png\"\r\n\r\nexport const ImageDisplay = () => {\r\n    return (\r\n        <div id=\"container\">\r\n            {/* <div className=\"spread\">\r\n                <div className=\"frame\">\r\n                    <img className=\"ldsc\" src=\"./imgs/DUNSEL1/1-5.png\" alt=\"landscapeImg\" />\r\n                </div> */}\r\n            \r\n            \r\n            {/* </div>\r\n            <div className=\"spread\">\r\n                <div className=\"frame port\">\r\n                    <img className=\"portrait\"src=\"./imgs/DUNSEL1/1-0.png\" alt=\"portraitImg\"/>\r\n                </div>\r\n                <div className=\"frame port\">\r\n                <img className=\"portrait\"src=\"./imgs/DUNSEL1/1-0.png\" alt=\"portraitImg\"/>\r\n                </div>\r\n                \r\n            </div> */}\r\n        \r\n            <div className=\"spread\">\r\n                <div className=\"frame port\">\r\n                    <img className=\"ldsc port\"src=\"./imgs/DUNSEL1/1-5.png\" alt=\"portraitImg\"/>\r\n                </div>\r\n                <div className=\"frame port\">\r\n                    \r\n                    <img id=\"tester\" className=\"portrait\" src=\"./imgs/DUNSEL1/1-0.png\" alt=\"portraitImg\" />\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","export const createIssue = (issueNumber, pages,landscapeArray) => {\r\n\r\n    const pagesAssigner = () => {\r\n        let pagesArray=[]\r\n        for (let p = 0; p <= pages; p++){\r\n            let image = new Image();\r\n            image.src = (\"./imgs/Dunsel\" + issueNumber + \"/\" + issueNumber + \"-\" + p + \".png\");\r\n            let landscape = false;\r\n            if(landscapeArray.includes(p)){landscape = true}\r\n            let newPage ={\r\n                number: p,\r\n                image: image,\r\n                landscape\r\n                \r\n\r\n                \r\n            }\r\n            pagesArray.push(newPage)\r\n            \r\n        }\r\n        return pagesArray;\r\n    }\r\n\r\n    return {\r\n        issueNumber,\r\n        pages: pagesAssigner()\r\n    }\r\n }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Slider } from './Slider';\nimport { createIssue } from './issueCreator';\nimport { ImageDisplay } from './ImageDisplay.js'\n\n\nconst testIssue = createIssue(1,7,[5,6])\n//<Slider issue=xxx />\n//ReactDOM.render(<ImageDisplay/>, document.getElementById('root'));\n ReactDOM.render(<Slider issue={testIssue} />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}